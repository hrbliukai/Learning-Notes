Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.
-----
Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?

Write a function to determine if a given target is in the array.

"// can convert to iterative solution
//
// in term of complexity
// having duplicated numbers will impact worse case proformance
// because there's sitution that no way to judge which half to proceed
// so worse case O(n)"


"int search(int A[], int start, int end, int target)
{
    if(end<start) return -1;
    if(start==end) return A[start]==target ? start : -1;
    
    int mid = start + (end-start)/2;
    if(A[mid]==target) return mid;
    
    if(A[mid]<target)
    {
        if(A[start]<A[mid]) return search(A, mid+1, end, target);
        else
        {
            int r = search(A, mid+1, end, target);
            return r!=-1 ? r : search(A, start, mid-1, target);
        }
    }
    else
    {
        if(A[mid]<A[end]) return search(A, start, mid-1, target);
        else
        {
            int r = search(A, mid+1, end, target);
            return r!=-1 ? r : search(A, start, mid-1, target);
        }
    }
}"
